/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.critterdroid.app;

import automenta.netention.Detail;
import automenta.netention.Self;
import automenta.netention.app.RunSelfBrowser;
import automenta.netention.index.SchemaIndex;
import automenta.netention.index.SchemaIndex.SchemaResult;
import automenta.netention.rdf.AddOWLPatterns;
import automenta.netention.swing.ReadTextDocumentPanel;
import automenta.netention.swing.util.SwingWindow;
import com.badlogic.gdx.Graphics;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;
import com.critterdroid.app.SpiderSim.Spider;
import com.critterdroid.bio.Material;
import com.critterdroid.bio.Material.Text;
import com.critterdroid.bio.Simulation;
import com.critterdroid.bio.brain.RandomWiring;
import com.critterdroid.entities.Critter;
import com.critterdroid.simulation.App;
import com.critterdroid.simulation.Speak;
import edu.uci.ics.jung.graph.DirectedSparseGraph;
import edu.uci.ics.jung.graph.ObservableGraph;
import edu.uci.ics.jung.graph.event.GraphEvent;
import edu.uci.ics.jung.graph.event.GraphEvent.Vertex;
import edu.uci.ics.jung.graph.event.GraphEventListener;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author seh
 */
public class SpacegraphGraph implements Simulation {
    private App sim;

    
    private void schemaSuggest(String query, ObservableGraph<ConceptNode, String> g, Self self, SchemaIndex si) {
        ConceptNode a = new ConceptNode(query, 2.0f);
        g.addVertex(a);
        
        int i = 0;
        for (SchemaResult sr : si.getSuggestions(query)) {
            ConceptNode b = new ConceptNode(sr.toString(self), (float)sr.score/10.0f);
            g.addVertex(b);
            g.addEdge("e." + query + i, a, b);
            i++;
        }
    }
    private void add(String query, ObservableGraph<ConceptNode, String> g, List<? extends Detail> details) {
        ConceptNode a = new ConceptNode(query, 2.0f);
        g.addVertex(a);
        
        int i = 0;
        for (Detail d : details) {
            ConceptNode b = new ConceptNode(d.toString(), 1.0f);
            g.addVertex(b);
            g.addEdge("e." + query + i, a, b);
            i++;
        }
    }

    abstract public class GraphCritter<N,E> extends Critter implements GraphEventListener {
        private final ObservableGraph<N, E> graph;
        
        private Map<N, Object> nodeComponents = new HashMap();
        private Map<E, Object> edgeComponents = new HashMap();

        public GraphCritter(ObservableGraph<N,E> g) {
            this.graph = g;
            
            g.addGraphEventListener(this);
            update();
        }

        public void update() {
            //remove existing
            
            for (N n : graph.getVertices()) {
                addNode(n);
            }
            for (E e : graph.getEdges()) {
                addEdge(e, graph.getSource(e), graph.getDest(e));
            }
        }
        
        
        @Override
        public void init(App s) {
        }

        @Override
        protected void update(double dt) {
        }

        PolygonShape arrowShape = new PolygonShape();
        Vector2[] v;
        
        @Override
        public void renderUnderlay(Graphics g) {
            for (E e : edgeComponents.keySet()) {
                N a = graph.getSource(e);
                N b = graph.getDest(e);
                
                Body ba = (Body)nodeComponents.get(a);
                Body bb = (Body)nodeComponents.get(b);
                
                
                App.setLineWidth(3.0f);
                App.setColor(new Color(0.5f, 0.5f, 0.5f, 0.5f));
                //sim.drawLine(ba.getWorldCenter().x, ba.getWorldCenter().y, bb.getWorldCenter().x, bb.getWorldCenter().y);
                
                float mx = 0.5f * (ba.getWorldCenter().x + bb.getWorldCenter().x);                
                float my = 0.5f * (ba.getWorldCenter().y + bb.getWorldCenter().y);
                float ma = (float)Math.atan2(bb.getWorldCenter().y - ba.getWorldCenter().y, bb.getWorldCenter().x - ba.getWorldCenter().x);
                
                float thickness = 0.1f;
                float length = ba.getWorldCenter().dst(bb.getWorldCenter());

                
                if (v == null) {
                    v = new Vector2[3];
                    v[0] = new Vector2();
                    v[1] = new Vector2();
                    v[2] = new Vector2();
                }
                
                if (length > 0) {
                    v[0].set(-1*length/2f, -1*thickness);
                    v[1].set(1*length/2f, 0);
                    v[2].set(-1*length/2f, 1*thickness);
                    arrowShape.set(v);

                    sim.drawPolygon(mx, my, arrowShape, ma, true);
                }
            }
        }

        @Override
        public void handleGraphEvent(GraphEvent ge) {
            
            if (ge.getType() == GraphEvent.Type.VERTEX_ADDED ) {
                Vertex<N,E> v = (Vertex)ge;
                addNode(v.getVertex());
            }
        }
        
        

        @Override
        public void renderOverlay(Graphics g) {
        }
        
        protected N addNode(N n) {
            nodeComponents.put(n, getNodeComponent(n));
            return n;            
        }
        
        abstract public Object getNodeComponent(N n);
//        public Object getNodeComponent(N n) {
//            Material m = new Material(Color.GRAY.mul(0.95f), new Color(1.0f, 1.0f, 1.0f, 0.5f), 0);
//            m.addText(new Text(n.toString(), -6, 1, 1.0f, 1.0f));
//            
//            Body b = sim.newRectangle(0.8f, 0.4f, 3f, -2f*0.3f, 0, 7.0f, m);            
//            b.setAngularDamping(0.8f);
//            b.setLinearDamping(0.9f);
//            return b;
//            
//        }
        
        public Object getEdgeComponent(E e, N from, N to) {
            Body bfrom = (Body)nodeComponents.get(from);
            Body bto = (Body)nodeComponents.get(to);
            return sim.joinDistance(bfrom, bto, new Vector2(bfrom.getWorldCenter()), new Vector2(bto.getWorldCenter()), 1.5f);
            //return sim.joinPrismatic(bfrom, bto, new Vector2(bfrom.getWorldCenter()), new Vector2(0, 1));
        }
        
        protected void removeNode(N n) {
            
        }
        
        protected E addEdge(E e, N from, N to) {
            edgeComponents.put(e, getEdgeComponent(e, from, to));
            return e;
        }
        
        protected void removeEdge(E e) {
            
        }
    }
    
    public static class ConceptNode {
        public final String text;
        public final float strength;

        public ConceptNode(String text, float strength) {
            this.text = text;
            this.strength = strength;
        }

        @Override
        public int hashCode() {
            return text.hashCode();
        }

        @Override
        public boolean equals(Object obj) {
            if (obj instanceof ConceptNode)
                return text.equals(((ConceptNode)obj).text);
            return false;
        }
        
                
        
    }
    
    @Override
    public void init(App app) {

        this.sim = app;
        
        World world = app.world;
        
        world.setGravity(new Vector2(0, 0));
        

        Spacegraph.addWorldBox(app, world, 16f, 12f, 0.1f);

        final ObservableGraph<ConceptNode,String> g = new ObservableGraph(new DirectedSparseGraph());
        
        final Self self = RunSelfBrowser.newDefaultSelf();
        {
            AddOWLPatterns.add("../netention/schema/sumodlfull.owl", self);
            //AddOWLPatterns.add("../netention/schema/sweetAll.owl", self);

            self.getPattern("http://stuarthendren.net/resource/sumodlfull.owl#Artifact").addParent("Built");
        }
        
        SchemaIndex si = new SchemaIndex(self);
        
//        schemaSuggest("time", g, self, si);
//        schemaSuggest("energy", g, self, si);
//        schemaSuggest("space", g, self, si);
//        schemaSuggest("agent", g, self, si);
        
//        g.addVertex("a");
//        g.addVertex("b");
//        g.addVertex("c");
//        g.addVertex("d");
//        g.addEdge("ab", "a", "b");
//        g.addEdge("bc", "b", "c");
//        g.addEdge("ad", "a", "d");
        
        GraphCritter<ConceptNode,String> gc = new GraphCritter<ConceptNode, String>(g) {

            @Override
            public Object getNodeComponent(final ConceptNode n) {
                Material m = new Material(new Color(0.35f, 0.25f, 0.35f + (n.strength * 0.65f), 0.95f), new Color(1.0f, 1.0f, 1.0f, 0.5f), 0) {

                    @Override
                    public void onTouchDown(int i, Vector2 p) {
                        super.onTouchDown(i, p);
                        Speak.speak(n.text);
                    }
                    
                };
                m.addText(new Text(n.text, -1, 1, 1.0f, 0.3f));

                Body b = sim.newRectangle(0.03f * n.strength * (n.text.length()), 0.1f * n.strength, 3f, -2f*0.3f, 0, 7.0f, m);            
                b.setAngularDamping(0.8f);
                b.setLinearDamping(0.9f);
                return b;
            }
            
        };
        
        app.addCritter(gc);
        
        Spider r, r2;
        app.addCritter(r = new SpiderSim.Spider(2, 5, 0.618f, 0, 0, new Color(1.0f, 0.8f, 0.1f, 1.0f), new RandomWiring(21000, 2, 8, 0.25f, 0.1f)));
        SpiderSim.addControls("Spider", app, r);

        app.addCritter(r2 = new SpiderSim.Spider(1, 4, 0.710f, 0, 0, new Color(0.5f, 1.0f, 0.1f, 0.95f), new RandomWiring(15000, 2, 8, 0.25f, 0.1f)));
        SpiderSim.addControls("Worm", app, r2);

//        for (int i = 0; i < 4; i++) {
//            Material m = new Material(Color.GRAY.mul(0.95f), new Color(1.0f, 1.0f, 1.0f, 0.5f), 5);
//            m.addText(new Text("Text", -6, 1, 1.0f, 1.0f));
//            
//            sim.newRectangle(0.8f+i, 0.4f+i, 3f, -2f+i*0.3f, 0, 1.0f, m);            
//        }
        
        ReadTextDocumentPanel rd = new ReadTextDocumentPanel() {

            @Override
            protected void commit(List<? extends Detail> ld) {
                super.commit(ld);

                add(getText(), g, ld);
            }
            
        };

        rd.add(new ReadTextDocumentPanel.Sentenceize("Sentence-ize"));
        rd.add(new ReadTextDocumentPanel.Paragraphize("Paragraph-ize"));
        rd.add(new ReadTextDocumentPanel.TwitterSearch("Twitter Search"));
        //schema search
        //...
        
        new SwingWindow(rd, 800, 600, true);
        
    }
    
    public void addCircleRock(App sim, float x, float y, float r, Material m) {
        sim.newCircle(r, x, y, 1.0f, m);
    }
    
    
    public static void main(String[] args) {
        App.run(new SpacegraphGraph(), "Spacegraph", 1280, 720);
    }
}
